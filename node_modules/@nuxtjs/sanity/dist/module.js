'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

const kit = require('@nuxt/kit');
const chalk = require('chalk');
const consola = require('consola');
const fsExtra = require('fs-extra');
const upath = require('upath');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

const consola__default = /*#__PURE__*/_interopDefaultLegacy(consola);

var name = "@nuxtjs/sanity";

const CONFIG_KEY = "sanity";
function validateConfig({ projectId, dataset }) {
  if (!projectId) {
    consola__default['default'].warn(`Make sure you specify a ${chalk.bold("projectId")} in your sanity config.`);
    return false;
  } else {
    consola__default['default'].info(`Enabled ${chalk.bold("@nuxtjs/sanity")} for project ${chalk.bold(projectId)} (${chalk.bold(dataset)}).`);
    return true;
  }
}
function getDefaultSanityConfig(jsonPath) {
  try {
    const { projectId, dataset } = fsExtra.readJSONSync(jsonPath).api;
    return { projectId, dataset };
  } catch (e) {
    return {};
  }
}
const module$1 = kit.defineNuxtModule((nuxt) => ({
  name,
  configKey: "sanity",
  defaults: {
    contentHelper: true,
    imageHelper: true,
    dataset: "production",
    apiVersion: "1",
    withCredentials: false,
    additionalClients: {},
    ...getDefaultSanityConfig(upath.resolve(nuxt.options.rootDir, "./sanity.json"))
  },
  setup(options, nuxt2) {
    if (!("useCdn" in options)) {
      options.useCdn = process.env.NODE_ENV === "production" && !options.token;
    }
    if (!validateConfig(options))
      return;
    try {
      if (!options.minimal) {
        options.minimal = !kit.requireModule("@sanity/client");
      }
    } catch (e) {
      options.minimal = true;
      consola__default['default'].warn(`Not using ${chalk.bold("@sanity/client")} as it cannot be resolved in your project dependencies.
       Try running ${chalk.bold("yarn add @sanity/client")} or ${chalk.bold("npm install @sanity/client")}.
       To disable this warning, set ${chalk.bold("sanity: { minimal: true }")} in your nuxt.config.js.`);
    }
    nuxt2.options[CONFIG_KEY] = options;
    const autoregister = !!nuxt2.options.components;
    kit.addPlugin({
      src: upath.resolve(__dirname, "../templates/plugin.js"),
      fileName: "sanity/plugin.js",
      options: {
        client: !options.minimal,
        components: {
          autoregister,
          imageHelper: options.imageHelper,
          contentHelper: options.contentHelper
        },
        sanityConfig: JSON.stringify({
          useCdn: options.useCdn,
          projectId: options.projectId,
          dataset: options.dataset,
          apiVersion: options.apiVersion,
          withCredentials: options.withCredentials,
          token: options.token
        }),
        additionalClients: JSON.stringify(options.additionalClients)
      }
    });
    if (autoregister) {
      nuxt2.hook("components:dirs", (dirs) => {
        dirs.push({
          path: upath.join(__dirname, "components"),
          extensions: ["js"]
        });
      });
    }
    nuxt2.options.build.transpile = nuxt2.options.build.transpile || [];
    nuxt2.options.build.transpile.push(/^@nuxtjs[\\/]sanity/);
  }
}));

exports.CONFIG_KEY = CONFIG_KEY;
exports.default = module$1;
