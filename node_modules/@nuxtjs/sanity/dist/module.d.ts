import * as _nuxt_kit from '@nuxt/kit';
import { SanityClient } from '@sanity/client';

/**
 * Adapted from https://github.com/rexxars/picosanity
 */
interface SanityConfiguration {
    useCdn?: boolean;
    projectId: string;
    dataset?: string;
    apiVersion: string;
    withCredentials?: boolean;
    token?: string;
}
declare function createClient(config: SanityConfiguration): {
    clone: () => any;
    /**
     * Perform a fetch using GROQ syntax.
     */
    fetch<T = unknown>(query: string, params?: Record<string, any> | undefined): Promise<T>;
};

declare const HELPER_KEY: `$${typeof CONFIG_KEY}`;

interface Client {
    client: SanityClient;
    config: Pick<SanityModuleOptions, 'useCdn' | 'projectId' | 'dataset' | 'withCredentials' | 'token'>;
    fetch: ReturnType<typeof createClient>['fetch'];
    setToken: (token: string) => void;
}
declare type SanityHelper = Record<string, Client> & Client;
declare module '@nuxt/types' {
    interface NuxtOptions {
        [CONFIG_KEY]: SanityModuleOptions;
    }
    interface Configuration {
        [CONFIG_KEY]: SanityModuleOptions;
    }
    interface NuxtAppOptions {
        [HELPER_KEY]: SanityHelper;
    }
}
declare module 'vue/types/vue' {
    interface Vue {
        [HELPER_KEY]: SanityHelper;
    }
}
declare module 'vuex/types/index' {
    interface Store<S> {
        [HELPER_KEY]: SanityHelper;
    }
}

interface SanityModuleOptions extends Partial<SanityConfiguration> {
    /**
     * Use a micro-client that only supports making queries.
     * @default false
     */
    minimal?: boolean;
    /**
     * Register a global SanityImage component to generate correct Sanity image URLs
     * @default true
     */
    imageHelper?: boolean;
    /**
     * Register a global SanityContent component to serialize Sanity Portable Text
     * @default true
     */
    contentHelper?: boolean;
    /**
     * Don't disable `useCdn` when preview mode is on
     * https://nuxtjs.org/docs/2.x/features/live-preview/
     *
     * @default false
     */
    disableSmartCdn?: boolean;
    /**
     * Configuration for any additional clients
     */
    additionalClients?: Record<string, Partial<SanityConfiguration>>;
}
declare const CONFIG_KEY: "sanity";
declare const _default: _nuxt_kit.LegacyNuxtModule;

export default _default;
export { CONFIG_KEY, SanityModuleOptions };
