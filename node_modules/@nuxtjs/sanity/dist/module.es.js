import { defineNuxtModule, requireModule, addPlugin } from '@nuxt/kit';
import { bold } from 'chalk';
import consola from 'consola';
import { readJSONSync } from 'fs-extra';
import { resolve, join } from 'upath';

var name = "@nuxtjs/sanity";

const CONFIG_KEY = "sanity";
function validateConfig({ projectId, dataset }) {
  if (!projectId) {
    consola.warn(`Make sure you specify a ${bold("projectId")} in your sanity config.`);
    return false;
  } else {
    consola.info(`Enabled ${bold("@nuxtjs/sanity")} for project ${bold(projectId)} (${bold(dataset)}).`);
    return true;
  }
}
function getDefaultSanityConfig(jsonPath) {
  try {
    const { projectId, dataset } = readJSONSync(jsonPath).api;
    return { projectId, dataset };
  } catch (e) {
    return {};
  }
}
const module = defineNuxtModule((nuxt) => ({
  name,
  configKey: "sanity",
  defaults: {
    contentHelper: true,
    imageHelper: true,
    dataset: "production",
    apiVersion: "1",
    withCredentials: false,
    additionalClients: {},
    ...getDefaultSanityConfig(resolve(nuxt.options.rootDir, "./sanity.json"))
  },
  setup(options, nuxt2) {
    if (!("useCdn" in options)) {
      options.useCdn = process.env.NODE_ENV === "production" && !options.token;
    }
    if (!validateConfig(options))
      return;
    try {
      if (!options.minimal) {
        options.minimal = !requireModule("@sanity/client");
      }
    } catch (e) {
      options.minimal = true;
      consola.warn(`Not using ${bold("@sanity/client")} as it cannot be resolved in your project dependencies.
       Try running ${bold("yarn add @sanity/client")} or ${bold("npm install @sanity/client")}.
       To disable this warning, set ${bold("sanity: { minimal: true }")} in your nuxt.config.js.`);
    }
    nuxt2.options[CONFIG_KEY] = options;
    const autoregister = !!nuxt2.options.components;
    addPlugin({
      src: resolve(__dirname, "../templates/plugin.js"),
      fileName: "sanity/plugin.js",
      options: {
        client: !options.minimal,
        components: {
          autoregister,
          imageHelper: options.imageHelper,
          contentHelper: options.contentHelper
        },
        sanityConfig: JSON.stringify({
          useCdn: options.useCdn,
          projectId: options.projectId,
          dataset: options.dataset,
          apiVersion: options.apiVersion,
          withCredentials: options.withCredentials,
          token: options.token
        }),
        additionalClients: JSON.stringify(options.additionalClients)
      }
    });
    if (autoregister) {
      nuxt2.hook("components:dirs", (dirs) => {
        dirs.push({
          path: join(__dirname, "components"),
          extensions: ["js"]
        });
      });
    }
    nuxt2.options.build.transpile = nuxt2.options.build.transpile || [];
    nuxt2.options.build.transpile.push(/^@nuxtjs[\\/]sanity/);
  }
}));

export default module;
export { CONFIG_KEY };
