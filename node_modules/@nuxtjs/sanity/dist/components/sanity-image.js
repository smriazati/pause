'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

const extendVue = (definition) => definition;

const baseURL = "https://cdn.sanity.io/images";
const SanityImage = extendVue({
  name: "SanityImage",
  functional: true,
  props: {
    assetId: { type: String, required: true },
    projectId: {
      type: String,
      default: null
    },
    dataset: {
      type: String,
      default: null
    },
    auto: { type: String },
    bg: { type: String },
    blur: {
      type: [Number, String],
      validator: (value) => Number(value) >= 0 && Number(value) <= 100
    },
    crop: {
      type: String,
      validator: (value) => [
        "top",
        "bottom",
        "left",
        "right",
        "center",
        "focalpoint",
        "entropy"
      ].includes(value)
    },
    dl: { type: String },
    dpr: {
      type: [Number, String],
      validator: (value) => [1, 2, 3].includes(Number(value))
    },
    fit: {
      type: String,
      validator: (value) => ["clip", "crop", "fill", "fillmax", "max", "scale", "min"].includes(value)
    },
    flip: {
      type: String,
      validator: (value) => ["h", "v", "hv"].includes(value)
    },
    fm: {
      type: String,
      validator: (value) => ["jpg", "pjpg", "png", "webp"].includes(value)
    },
    fpX: {
      type: [Number, String],
      validator: (value) => Number(value) <= 1 && Number(value) >= 0
    },
    fpY: {
      type: [Number, String],
      validator: (value) => Number(value) <= 1 && Number(value) >= 0
    },
    h: { type: [Number, String] },
    invert: { type: Boolean },
    maxH: { type: [Number, String] },
    maxW: { type: [Number, String] },
    minH: { type: [Number, String] },
    minW: { type: [Number, String] },
    or: {
      type: [Number, String],
      validator: (value) => [0, 90, 180, 270].includes(Number(value))
    },
    q: {
      type: [Number, String],
      validator: (value) => Number(value) >= 0 && Number(value) <= 100
    },
    rect: { type: String },
    sat: { type: [Number, String] },
    sharpen: {
      type: [Number, String],
      validator: (value) => Number(value) >= 0 && Number(value) <= 100
    },
    w: { type: [Number, String] }
  },
  render(h, { props, data, parent, scopedSlots }) {
    const keys = [
      "auto",
      "bg",
      "blur",
      "crop",
      "dl",
      "dpr",
      "fit",
      "flip",
      "fm",
      "fpX",
      "fpY",
      "h",
      "invert",
      "maxH",
      "maxW",
      "minH",
      "minW",
      "or",
      "q",
      "rect",
      "sat",
      "sharpen",
      "w"
    ];
    const queryParams = keys.map((prop) => {
      const urlFormat = prop.replace(/[A-Z]/, (r) => "-" + r.toLowerCase());
      return props[prop] ? `${urlFormat}=${props[prop]}` : void 0;
    }).filter(Boolean).join("&");
    const parts = props.assetId.split("-").slice(1);
    const format = parts.pop();
    const projectId = props.projectId || parent && parent.$sanity.config.projectId;
    const dataset = props.dataset || parent.$sanity && parent.$sanity.config.dataset || "production";
    const src = `${baseURL}/${projectId}/${dataset}/${parts.join("-")}.${format}${queryParams ? "?" + queryParams : ""}`;
    const renderRawImage = () => h("img", {
      ...data,
      attrs: {
        ...data.attrs,
        src
      }
    });
    return scopedSlots.default ? scopedSlots.default({ src }) || renderRawImage() : renderRawImage();
  }
});

exports.SanityImage = SanityImage;
exports.default = SanityImage;
