import * as vue_types_vue from 'vue/types/vue';
import * as vue_types_umd from 'vue/types/umd';
import { VueConstructor } from 'vue';

interface MarkDefs {
    _key: string;
    _type: string;
    [key: string]: string;
}
interface Children {
    _key: string;
    _type: string;
    marks: string[];
    text: string;
}
interface Block {
    _type: 'block';
    _key: string;
    children: Children[];
    level?: number;
    listItem?: string;
    markDefs: MarkDefs[];
    style: string;
}
interface CustomBlock {
    _type: 'custom';
    _key: string;
    [key: string]: any;
}
interface Serializers {
    /**
     * block components or elements that render non-blocks
     */
    types?: Record<string, VueConstructor<Vue> | (() => VueConstructor<Vue>) | string>;
    /**
     * inline components or elements
     */
    marks?: Record<string, VueConstructor<Vue> | (() => VueConstructor<Vue>) | string>;
    /**
     * block components or elements that wrap blocks instead of `<p>` tags
     */
    styles?: Record<string, VueConstructor<Vue> | (() => VueConstructor<Vue>) | string>;
    listItem?: VueConstructor<Vue> | string;
    container?: VueConstructor<Vue> | string;
}
declare const SanityContent: vue_types_vue.ExtendedVue<vue_types_umd, {}, {}, {}, {
    blocks: (Block | CustomBlock)[];
    serializers: Serializers;
    renderContainerOnSingleChild: boolean;
}>;

export default SanityContent;
export { SanityContent, Serializers };
