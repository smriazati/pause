'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

const defu = require('defu');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

const defu__default = /*#__PURE__*/_interopDefaultLegacy(defu);

const extendVue = (definition) => definition;

const defaults = {
  types: {
    span: "span",
    image: "img"
  },
  marks: {
    strong: "strong",
    em: "em",
    link: "a"
  },
  styles: {
    h1: "h1",
    h2: "h2",
    h3: "h3",
    h4: "h4",
    h5: "h5",
    h6: "h6",
    normal: "p",
    blockquote: "blockquote"
  },
  listItem: "li",
  container: "div"
};
let level = 1;
function getProps(item) {
  if (!item) {
    return {};
  }
  const obj = Object.entries(item).reduce((obj2, [key, value]) => {
    switch (true) {
      case ["_key", "key"].includes(key):
        obj2.key = value || null;
        return obj2;
      case ["class", "href", "src"].includes(key):
        obj2.attrs[key] = value;
        return obj2;
      case ["_type"].includes(key):
        return obj2;
      default:
        obj2.props[key] = value;
        return obj2;
    }
  }, {
    props: {},
    attrs: {}
  });
  obj.props = {
    level,
    ...obj.props
  };
  return obj;
}
function findSerializer(item, serializers) {
  if (!item)
    return void 0;
  const { _type, listItem } = item;
  return listItem ? serializers.listItem || "li" : _type && _type in serializers.types ? serializers.types[_type] : _type && _type in serializers.marks ? serializers.marks[_type] : void 0;
}
function wrapStyle(h, { style, listItem }, serializers, children) {
  const matches = style ? style.match(/^h(\d)$/) : [];
  if (!listItem && matches && matches.length > 1) {
    level = Number(matches[1]);
  }
  if (!listItem && style && serializers.styles[style]) {
    return h(serializers.styles[style], {}, children);
  }
  return children;
}
function wrapInSerializer(h, item, content, serializers) {
  const serializer = findSerializer(item, serializers);
  if (!serializer)
    return content;
  return [h(serializer, getProps(item), content)];
}
function wrapMarks(h, content, [mark, ...marks] = [], serializers = defaults, markDefs = []) {
  if (!mark)
    return content;
  const definition = mark in serializers.marks ? { _type: mark, _key: "" } : markDefs.find((m) => m._key === mark);
  return h(findSerializer(definition, serializers) || "span", getProps(definition), [wrapMarks(h, content, marks, serializers, markDefs)]);
}
function walkList(blocks, block) {
  const { length } = blocks;
  if (!block.level) {
    blocks.push(block);
    return blocks;
  }
  const { _type, children, level: level2 } = blocks[length - 1] || {};
  if (_type === "list" && children) {
    if (level2 === block.level) {
      children.push(block);
    } else {
      walkList(children, block);
    }
  } else {
    blocks.push({
      _type: "list",
      children: [block],
      level: block.level
    });
  }
  return blocks;
}
function renderBlocks(h, blocks, serializers, nested = false) {
  const nestedBlocks = nested ? blocks : blocks.reduce(walkList, []);
  return nestedBlocks.map((block) => {
    const node = wrapStyle(h, block, serializers, wrapInSerializer(h, block, block._type === "block" ? (block.children || []).map((child) => child._type !== "span" ? h(findSerializer(child, serializers) || "span", getProps(child), [wrapMarks(h, child.text, child.marks, serializers, block.markDefs)]) : wrapMarks(h, child.text, child.marks, serializers, block.markDefs)) : [], serializers));
    if (process.env.NODE_ENV === "development") {
      if (!node || Array.isArray(node) && !node.length)
        console.warn(`No serializer found for block type "${block._type}".`, block);
    }
    return node;
  });
}
const SanityContent = extendVue({
  name: "SanityContent",
  functional: true,
  props: {
    blocks: {
      type: Array,
      default: () => []
    },
    serializers: {
      type: Object,
      default: () => ({})
    },
    renderContainerOnSingleChild: { type: Boolean, default: false }
  },
  render(h, { props, data }) {
    const serializers = defu__default['default'](props.serializers, defaults);
    serializers.types.list = serializers.types.list || extendVue({
      name: "ListComponent",
      functional: true,
      props: {
        children: {
          type: Array,
          default: () => []
        }
      },
      render(h2, { props: props2 }) {
        const tag = props2.children.length && props2.children[0].listItem === "number" ? "ol" : "ul";
        return h2(tag, {}, renderBlocks(h2, props2.children, serializers, true));
      }
    });
    return h(serializers.container, data, renderBlocks(h, props.blocks || [], serializers));
  }
});

exports.SanityContent = SanityContent;
exports.default = SanityContent;
