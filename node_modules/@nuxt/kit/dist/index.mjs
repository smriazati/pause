import path, { join, resolve, parse, basename } from 'path';
import fs, { existsSync, readdirSync, promises, lstatSync } from 'fs';
import defu from 'defu';
import { applyDefaults } from 'untyped';
import * as rc from 'rc9';
import jiti from 'jiti';
import { hasProtocol, isRelative, joinURL, withTrailingSlash, normalizeURL } from 'ufo';
import env from 'std-env';
import createRequire from 'create-require';
import { pascalCase } from 'scule';
import dotenv from 'dotenv';
import { getContext } from 'unctx';
import hash from 'hash-sum';
import consola from 'consola';
import { resolve as resolve$1, join as join$1 } from 'upath';
import globby from 'globby';

const _require = jiti(process.cwd());
function isNodeModules(id) {
  return /[/\\]node_modules[/\\]/.test(id);
}
function clearRequireCache(id) {
  if (isNodeModules(id)) {
    return;
  }
  const entry = getRequireCacheItem(id);
  if (!entry) {
    delete _require.cache[id];
    return;
  }
  if (entry.parent) {
    entry.parent.children = entry.parent.children.filter((e) => e.id !== id);
  }
  for (const child of entry.children) {
    clearRequireCache(child.id);
  }
  delete _require.cache[id];
}
function scanRequireTree(id, files = new Set()) {
  if (isNodeModules(id) || files.has(id)) {
    return files;
  }
  const entry = getRequireCacheItem(id);
  if (!entry) {
    files.add(id);
    return files;
  }
  files.add(entry.id);
  for (const child of entry.children) {
    scanRequireTree(child.id, files);
  }
  return files;
}
function getRequireCacheItem(id) {
  try {
    return _require.cache[id];
  } catch (e) {
  }
}
function requireModulePkg(id, opts = {}) {
  return requireModule(join(id, "package.json"), opts);
}
function resolveModule(id, opts = {}) {
  return _require.resolve(id, {
    paths: [].concat(global.__NUXT_PREPATHS__, opts.paths, process.cwd(), global.__NUXT_PATHS__).filter(Boolean)
  });
}
function tryResolveModule(path, opts = {}) {
  try {
    return resolveModule(path, opts);
  } catch (error) {
    if (error.code !== "MODULE_NOT_FOUND") {
      throw error;
    }
  }
}
function requireModule(id, opts = {}) {
  const resolvedPath = resolveModule(id, opts);
  if (opts.clearCache && !isNodeModules(id)) {
    clearRequireCache(resolvedPath);
  }
  let requiredModule = _require(resolvedPath);
  if (opts.interopDefault !== false && requiredModule && requiredModule.default) {
    requiredModule = requiredModule.default;
  }
  return requiredModule;
}
function tryRequireModule(id, opts = {}) {
  try {
    return requireModule(id, opts);
  } catch (e) {
  }
}

const _app = {
  vue: {
    config: {
      silent: { $resolve: (val, get) => val != null ? val : get("dev") },
      performance: { $resolve: (val, get) => val != null ? val : get("dev") }
    }
  },
  app: {
    $resolve: (val, get) => {
      const useCDN = hasProtocol(get("build.publicPath"), true) && !get("dev");
      const isRelativePublicPath = isRelative(get("build.publicPath"));
      return defu(val, {
        basePath: get("router.base"),
        assetsPath: isRelativePublicPath ? get("build.publicPath") : useCDN ? "/" : joinURL(get("router.base"), get("build.publicPath")),
        cdnURL: useCDN ? get("build.publicPath") : null
      });
    }
  },
  appTemplatePath: {
    $resolve: (val, get) => {
      if (val) {
        return resolve(get("srcDir"), val);
      }
      if (existsSync(join(get("srcDir"), "app.html"))) {
        return join(get("srcDir"), "app.html");
      }
      return resolve(get("buildDir"), "views/app.template.html");
    }
  },
  store: {
    $resolve: (val, get) => val !== false && existsSync(join(get("srcDir"), get("dir.store"))) && readdirSync(join(get("srcDir"), get("dir.store"))).find((filename) => filename !== "README.md" && filename[0] !== ".")
  },
  vueMeta: null,
  head: {
    meta: [],
    link: [],
    style: [],
    script: []
  },
  fetch: {
    server: true,
    client: true
  },
  plugins: [],
  extendPlugins: null,
  css: [],
  layouts: {},
  ErrorPage: null,
  loading: {
    color: "black",
    failedColor: "red",
    height: "2px",
    throttle: 200,
    duration: 5e3,
    continuous: false,
    rtl: false,
    css: true
  },
  loadingIndicator: {
    $resolve: (val, get) => {
      if (typeof val === "string") {
        val = { name: val };
      }
      return {
        name: "default",
        color: get("loading.color") || "#D3D3D3",
        color2: "#F5F5F5",
        background: get("manifest") && get("manifest.theme_color") || "white",
        dev: get("dev"),
        loading: get("messages.loading"),
        ...val
      };
    }
  },
  pageTransition: {
    $resolve: (val) => typeof val === "string" ? { name: val } : val,
    name: "page",
    mode: "out-in",
    appear: { $resolve: (val, get) => get("render.ssr") === false ? true : Boolean(val) },
    appearClass: "appear",
    appearActiveClass: "appear-active",
    appearToClass: "appear-to"
  },
  layoutTransition: {
    $resolve: (val) => typeof val === "string" ? { name: val } : val,
    name: "layout",
    mode: "out-in"
  },
  features: {
    store: true,
    layouts: true,
    meta: true,
    middleware: true,
    transitions: true,
    deprecations: true,
    validate: true,
    asyncData: true,
    fetch: true,
    clientOnline: true,
    clientPrefetch: true,
    componentAliases: true,
    componentClientOnly: true
  }
};

const _common = {
  rootDir: {
    $resolve: (val) => typeof val === "string" ? resolve(val) : process.cwd()
  },
  srcDir: {
    $resolve: (val, get) => resolve(get("rootDir"), val || ".")
  },
  buildDir: {
    $resolve: (val, get) => resolve(get("rootDir"), val || ".nuxt")
  },
  dev: Boolean(env.dev),
  test: Boolean(env.test),
  debug: {
    $resolve: (val, get) => val != null ? val : get("dev")
  },
  env: {
    $resolve: (val) => {
      val = { ...val };
      for (const key in process.env) {
        if (key.startsWith("NUXT_ENV_")) {
          val[key] = process.env[key];
        }
      }
      return val;
    }
  },
  createRequire: {
    $resolve: (val) => {
      val = process.env.NUXT_CREATE_REQUIRE || val || (typeof jest !== "undefined" ? "native" : "jiti");
      if (val === "jiti") {
        return (p) => jiti(typeof p === "string" ? p : p.filename);
      }
      if (val === "native") {
        return (p) => createRequire(typeof p === "string" ? p : p.filename);
      }
      return val;
    }
  },
  target: {
    $resolve: (val) => ["server", "static"].includes(val) ? val : "server"
  },
  ssr: true,
  mode: {
    $resolve: (val, get) => val || (get("ssr") ? "spa" : "universal"),
    $schema: { deprecated: "`mode` option is deprecated" }
  },
  modern: void 0,
  modules: [],
  buildModules: [],
  _modules: [],
  globalName: {
    $resolve: (val) => typeof val === "string" && /^[a-zA-Z]+$/.test(val) ? val.toLocaleLowerCase() : "nuxt"
  },
  globals: {
    id: (globalName) => `__${globalName}`,
    nuxt: (globalName) => `$${globalName}`,
    context: (globalName) => `__${globalName.toUpperCase()}__`,
    pluginPrefix: (globalName) => globalName,
    readyCallback: (globalName) => `on${pascalCase(globalName)}Ready`,
    loadedCallback: (globalName) => `_on${pascalCase(globalName)}Loaded`
  },
  serverMiddleware: {
    $resolve: (val) => {
      if (!val) {
        return [];
      }
      if (!Array.isArray(val)) {
        return Object.entries(val).map(([path, handler]) => ({ path, handler }));
      }
      return val;
    }
  },
  modulesDir: {
    $default: ["node_modules"],
    $resolve: (val, get) => [].concat(val.map((dir) => resolve(get("rootDir"), dir)), resolve(process.cwd(), "node_modules"))
  },
  dir: {
    assets: "assets",
    app: "app",
    layouts: "layouts",
    middleware: "middleware",
    pages: "pages",
    static: "static",
    store: "store"
  },
  extensions: {
    $resolve: (val) => [".js", ".mjs", ".ts", ".tsx", ".vue"].concat(val).filter(Boolean)
  },
  styleExtensions: [".css", ".pcss", ".postcss", ".styl", ".stylus", ".scss", ".sass", ".less"],
  alias: {
    $resolve: (val, get) => ({
      "~~": get("rootDir"),
      "@@": get("rootDir"),
      "~": get("srcDir"),
      "@": get("srcDir"),
      [get("dir.assets")]: join(get("srcDir"), get("dir.assets")),
      [get("dir.static")]: join(get("srcDir", get("dir.static"))),
      ...val
    })
  },
  ignoreOptions: void 0,
  ignorePrefix: "-",
  ignore: {
    $resolve: (val, get) => [
      "**/*.test.*",
      "**/*.spec.*",
      get("ignorePrefix") && `**/${get("ignorePrefix")}*.*`
    ].concat(val).filter(Boolean)
  },
  watch: {
    $resolve: (val, get) => {
      const rootDir = get("rootDir");
      return Array.from(new Set([].concat(val, get("_nuxtConfigFiles")).filter(Boolean).map((p) => resolve(rootDir, p))));
    }
  },
  watchers: {
    rewatchOnRawEvents: void 0,
    webpack: {
      aggregateTimeout: 1e3
    },
    chokidar: {
      ignoreInitial: true
    }
  },
  editor: void 0,
  hooks: null,
  privateRuntimeConfig: {},
  publicRuntimeConfig: {
    app: {
      $resolve: (val, get) => ({ ...get("app"), ...val || {} })
    }
  }
};

const _internal = {
  _majorVersion: 2,
  _legacyGenerate: false,
  _start: false,
  _build: false,
  _generate: false,
  _cli: false,
  _requiredModules: {},
  _nuxtConfigFile: void 0,
  _nuxtConfigFiles: [],
  appDir: ""
};

const build = {
  quiet: Boolean(env.ci || env.test),
  analyze: false,
  profile: process.argv.includes("--profile"),
  extractCSS: false,
  cssSourceMap: {
    $resolve: (val, get) => val != null ? val : get("dev")
  },
  ssr: void 0,
  parallel: {
    $resolve: (val, get) => get("build.extractCSS") ? false : Boolean(val)
  },
  cache: false,
  standalone: false,
  publicPath: {
    $resolve: (val, get) => {
      if (hasProtocol(val, true) && get("dev")) {
        val = null;
      }
      return (val || "/_nuxt/").replace(/([^/])$/, "$1/");
    }
  },
  serverURLPolyfill: "url",
  filenames: {
    app: ({ isDev, isModern }) => isDev ? `[name]${isModern ? ".modern" : ""}.js` : `[contenthash:7]${isModern ? ".modern" : ""}.js`,
    chunk: ({ isDev, isModern }) => isDev ? `[name]${isModern ? ".modern" : ""}.js` : `[contenthash:7]${isModern ? ".modern" : ""}.js`,
    css: ({ isDev }) => isDev ? "[name].css" : "css/[contenthash:7].css",
    img: ({ isDev }) => isDev ? "[path][name].[ext]" : "img/[name].[contenthash:7].[ext]",
    font: ({ isDev }) => isDev ? "[path][name].[ext]" : "fonts/[name].[contenthash:7].[ext]",
    video: ({ isDev }) => isDev ? "[path][name].[ext]" : "videos/[name].[contenthash:7].[ext]"
  },
  loaders: {
    $resolve: (val, get) => {
      const styleLoaders = [
        "css",
        "cssModules",
        "less",
        "sass",
        "scss",
        "stylus",
        "vueStyle"
      ];
      for (const name of styleLoaders) {
        const loader = val[name];
        if (loader && loader.sourceMap === void 0) {
          loader.sourceMap = Boolean(get("build.cssSourceMap"));
        }
      }
      return val;
    },
    file: { esModule: false },
    fontUrl: { esModule: false, limit: 1e3 },
    imgUrl: { esModule: false, limit: 1e3 },
    pugPlain: {},
    vue: {
      productionMode: { $resolve: (val, get) => val != null ? val : get("dev") },
      transformAssetUrls: {
        video: "src",
        source: "src",
        object: "src",
        embed: "src"
      }
    },
    css: {
      importLoaders: 0,
      esModule: false
    },
    cssModules: {
      importLoaders: 0,
      esModule: false,
      modules: {
        localIdentName: "[local]_[hash:base64:5]"
      }
    },
    less: {},
    sass: {
      sassOptions: {
        indentedSyntax: true
      }
    },
    scss: {},
    stylus: {},
    vueStyle: {}
  },
  styleResources: {},
  plugins: [],
  terser: {},
  hardSource: false,
  aggressiveCodeRemoval: false,
  optimizeCSS: {
    $resolve: (val, get) => val != null ? val : get("build.extractCSS") ? {} : false
  },
  optimization: {
    runtimeChunk: "single",
    minimize: { $resolve: (val, get) => val != null ? val : get("dev") },
    minimizer: void 0,
    splitChunks: {
      chunks: "all",
      automaticNameDelimiter: "/",
      cacheGroups: {}
    }
  },
  splitChunks: {
    layouts: false,
    pages: true,
    commons: true
  },
  corejs: "auto",
  babel: {
    configFile: false,
    babelrc: false,
    plugins: [],
    presets: {},
    cacheDirectory: {
      $resolve: (val, get) => val != null ? val : get("dev")
    }
  },
  transpile: {
    $resolve: (val) => [].concat(val).filter(Boolean)
  },
  postcss: {
    preset: {
      stage: 2
    }
  },
  html: {
    minify: {
      collapseBooleanAttributes: true,
      decodeEntities: true,
      minifyCSS: true,
      minifyJS: true,
      processConditionalComments: true,
      removeEmptyAttributes: true,
      removeRedundantAttributes: true,
      trimCustomFragments: true,
      useShortDoctype: true
    }
  },
  template: void 0,
  templates: [],
  watch: [],
  devMiddleware: {
    stats: "none"
  },
  hotMiddleware: {},
  vendor: {
    $meta: {
      deprecated: "vendor has been deprecated since nuxt 2"
    }
  },
  stats: {
    $resolve: (val, get) => val === "none" || get("build.quiet") ? false : val,
    excludeAssets: [
      /.map$/,
      /index\..+\.html$/,
      /vue-ssr-(client|modern)-manifest.json/
    ]
  },
  friendlyErrors: true,
  additionalExtensions: [],
  warningIgnoreFilters: [],
  followSymlinks: false
};

const messages = {
  loading: "Loading...",
  error_404: "This page could not be found",
  server_error: "Server error",
  nuxtjs: "Nuxt",
  back_to_home: "Back to the home page",
  server_error_details: "An error occurred in the application and your page could not be served. If you are the application owner, check your logs for details.",
  client_error: "Error",
  client_error_details: "An error occurred while rendering the page. Check developer tools console for details."
};

const render = {
  bundleRenderer: {
    shouldPrefetch: () => false,
    shouldPreload: (_fileWithoutQuery, asType) => ["script", "style"].includes(asType),
    runInNewContext: { $resolve: (val, get) => val != null ? val : get("dev") }
  },
  crossorigin: void 0,
  resourceHints: true,
  ssr: void 0,
  ssrLog: { $resolve: (val, get) => get("dev") ? Boolean(val) : false },
  http2: {
    push: false,
    shouldPush: null,
    pushAssets: null
  },
  static: {
    prefix: true
  },
  compressor: {
    threshold: 0
  },
  etag: {
    hash: false,
    weak: false
  },
  csp: {
    $resolve: (val, get) => {
      if (!val) {
        return false;
      }
      return {
        hashAlgorithm: "sha256",
        allowedSources: void 0,
        policies: void 0,
        addMeta: Boolean(get("target") === "static"),
        unsafeInlineCompatibility: false,
        reportOnly: get("debug"),
        ...val
      };
    }
  },
  dist: {
    index: false,
    maxAge: "1y"
  },
  fallback: {
    dist: {},
    static: {
      skipUnknown: true,
      handlers: {
        ".htm": false,
        ".html": false
      }
    }
  }
};

const router = {
  mode: "history",
  base: {
    $resolve: (val = "/") => withTrailingSlash(normalizeURL(val))
  },
  _routerBaseSpecified: {
    $resolve: (_val, get) => typeof get("router.base") === "string"
  },
  routes: [],
  routeNameSplitter: "-",
  middleware: {
    $resolve: (val) => Array.isArray(val) ? val : [val].filter(Boolean)
  },
  linkActiveClass: "nuxt-link-active",
  linkExactActiveClass: "nuxt-link-exact-active",
  linkPrefetchedClass: false,
  extendRoutes: null,
  scrollBehavior: {
    $schema: {
      deprecated: "router.scrollBehavior` property is deprecated in favor of using `~/app/router.scrollBehavior.js` file, learn more: https://nuxtjs.org/api/configuration-router#scrollbehavior"
    }
  },
  parseQuery: false,
  stringifyQuery: false,
  fallback: false,
  prefetchLinks: true,
  prefetchPayloads: true,
  trailingSlash: void 0
};

const server = {
  https: false,
  port: process.env.NUXT_PORT || process.env.PORT || process.env.npm_package_config_nuxt_port || 3e3,
  host: process.env.NUXT_HOST || process.env.HOST || process.env.npm_package_config_nuxt_host || "localhost",
  socket: process.env.UNIX_SOCKET || process.env.npm_package_config_unix_socket,
  timing: (val) => val ? { total: true, ...val } : false
};

const cli = {
  badgeMessages: [],
  bannerColor: "green"
};

const generate = {
  dir: {
    $resolve: (val = "dist", get) => resolve(get("rootDir"), val)
  },
  routes: [],
  exclude: [],
  concurrency: 500,
  interval: 0,
  subFolders: true,
  fallback: { $resolve: (val) => val === true ? "400.html" : val || "200.html" },
  crawler: true,
  manifest: true,
  nojekyll: true,
  cache: {
    ignore: [],
    globbyOptions: {
      gitignore: true
    }
  },
  staticAssets: {
    dir: "static",
    base: { $resolve: (val, get) => val || joinURL(get("app.assetsPath"), get("generate.dir")) },
    versionBase: { $resolve: (val, get) => val || joinURL(get("generate.base"), get("generate.version")) },
    version: { $resolve: (val) => val || String(Math.round(Date.now() / 1e3)) }
  }
};

const nuxtConfigSchema = {
  ..._app,
  ..._common,
  ..._internal,
  build,
  messages,
  render,
  router,
  server,
  cli,
  generate
};

function loadNuxtConfig(opts) {
  const rootDir = resolve(process.cwd(), opts.rootDir || ".");
  const nuxtConfigFile = tryResolveModule(resolve(rootDir, opts.configFile || "nuxt.config"));
  let nuxtConfig = {};
  if (nuxtConfigFile && existsSync(nuxtConfigFile)) {
    nuxtConfig = requireModule(nuxtConfigFile, { clearCache: true });
    nuxtConfig = { ...nuxtConfig };
    nuxtConfig._nuxtConfigFile = nuxtConfigFile;
    nuxtConfig._nuxtConfigFiles = Array.from(scanRequireTree(nuxtConfigFile));
  }
  nuxtConfig = defu(opts.config, nuxtConfig, rc.read({ name: ".nuxtrc", dir: rootDir }), rc.readUser(".nuxtrc"));
  if (!nuxtConfig.rootDir) {
    nuxtConfig.rootDir = rootDir;
  }
  return applyDefaults(nuxtConfigSchema, nuxtConfig);
}

async function loadEnv(rootDir) {
  const env = await loadDotenv({
    rootDir,
    dotenvFile: ".env",
    env: process.env,
    expand: true
  });
  for (const key in env) {
    if (!key.startsWith("_") && process.env[key] === void 0) {
      process.env[key] = env[key];
    }
  }
}
async function loadDotenv(opts) {
  const env = Object.create(null);
  const dotenvFile = resolve(opts.rootDir, opts.dotenvFile);
  if (existsSync(dotenvFile)) {
    const parsed = dotenv.parse(await promises.readFile(dotenvFile, "utf-8"));
    Object.assign(env, parsed);
  }
  if (!opts.env._applied) {
    Object.assign(env, opts.env);
    env._applied = true;
  }
  if (opts.expand) {
    expand(env);
  }
  return env;
}
function expand(target, source = {}, parse = (v) => v) {
  function getValue(key) {
    return source[key] !== void 0 ? source[key] : target[key];
  }
  function interpolate(value, parents = []) {
    if (typeof value !== "string") {
      return value;
    }
    const matches = value.match(/(.?\${?(?:[a-zA-Z0-9_:]+)?}?)/g) || [];
    return parse(matches.reduce((newValue, match) => {
      const parts = /(.?)\${?([a-zA-Z0-9_:]+)?}?/g.exec(match);
      const prefix = parts[1];
      let value2, replacePart;
      if (prefix === "\\") {
        replacePart = parts[0];
        value2 = replacePart.replace("\\$", "$");
      } else {
        const key = parts[2];
        replacePart = parts[0].substring(prefix.length);
        if (parents.includes(key)) {
          console.warn(`Please avoid recursive environment variables ( loop: ${parents.join(" > ")} > ${key} )`);
          return "";
        }
        value2 = getValue(key);
        value2 = interpolate(value2, [...parents, key]);
      }
      return value2 !== void 0 ? newValue.replace(replacePart, value2) : newValue;
    }, value));
  }
  for (const key in target) {
    target[key] = interpolate(getValue(key));
  }
}

const nuxtCtx = getContext("nuxt");
const useNuxt = nuxtCtx.use;
function defineNuxtConfig(config) {
  return config;
}
async function loadNuxt(opts) {
  const resolveOpts = { paths: opts.rootDir };
  if (!opts.version) {
    opts.version = tryResolveModule("nuxt3", resolveOpts) ? 3 : 2;
  }
  if (opts.version !== 2) {
    const { loadNuxt: loadNuxt3 } = requireModule("nuxt3", resolveOpts);
    const nuxt2 = await loadNuxt3(opts);
    return nuxt2;
  }
  const { loadNuxt: loadNuxt2 } = tryRequireModule("nuxt-edge", resolveOpts) || requireModule("nuxt", resolveOpts);
  const nuxt = await loadNuxt2({
    rootDir: opts.rootDir,
    for: opts.dev ? "dev" : "build",
    configOverrides: opts.config,
    ready: opts.ready
  });
  return nuxt;
}
function buildNuxt(nuxt) {
  const resolveOpts = { paths: nuxt.options.rootDir };
  if (nuxt.options._majorVersion === 3) {
    const { build: build2 } = requireModule("nuxt3", resolveOpts);
    return build2(nuxt);
  }
  const { build } = tryRequireModule("nuxt-edge", resolveOpts) || requireModule("nuxt", resolveOpts);
  return build(nuxt);
}

function chainFn(base, fn) {
  if (typeof fn !== "function") {
    return base;
  }
  return function(...args) {
    if (typeof base !== "function") {
      return fn.apply(this, args);
    }
    let baseResult = base.apply(this, args);
    if (baseResult === void 0) {
      [baseResult] = args;
    }
    const fnResult = fn.call(this, baseResult, ...Array.prototype.slice.call(args, 1));
    if (fnResult === void 0) {
      return baseResult;
    }
    return fnResult;
  };
}

function addTemplate(tmpl) {
  const nuxt = useNuxt();
  if (!tmpl) {
    throw new Error("Invalid tmpl: " + JSON.stringify(tmpl));
  }
  const src = typeof tmpl === "string" ? tmpl : tmpl.src;
  const srcPath = parse(src);
  if (typeof src !== "string" || !fs.existsSync(src)) {
    throw new Error("tmpl src not found: " + src);
  }
  const fileName = typeof tmpl === "string" ? "" : tmpl.fileName || tmpl.filename;
  const dst = fileName || `${basename(srcPath.dir)}.${srcPath.name}.${hash(src)}${srcPath.ext}`;
  const tmplObj = {
    src,
    dst,
    options: typeof tmpl === "string" ? void 0 : tmpl.options
  };
  nuxt.options.build.templates.push(tmplObj);
  return tmplObj;
}
function addPlugin(tmpl) {
  const nuxt = useNuxt();
  const { dst } = addTemplate(tmpl);
  if (!tmpl.mode && typeof tmpl.ssr === "boolean") {
    tmpl.mode = tmpl.ssr ? "server" : "client";
  }
  nuxt.options.plugins.unshift({
    src: path.join(nuxt.options.buildDir, dst),
    mode: tmpl.mode
  });
}
function addLayout(tmpl, name) {
  const nuxt = useNuxt();
  const { dst, src } = addTemplate(tmpl);
  const layoutName = name || path.parse(src).name;
  const layout = nuxt.options.layouts[layoutName];
  if (layout) {
    consola.warn(`Duplicate layout registration, "${layoutName}" has been registered as "${layout}"`);
  }
  nuxt.options.layouts[layoutName] = `./${dst}`;
  if (name === "error") {
    addErrorLayout(dst);
  }
}
function addErrorLayout(dst) {
  const nuxt = useNuxt();
  const relativeBuildDir = path.relative(nuxt.options.rootDir, nuxt.options.buildDir);
  nuxt.options.ErrorPage = `~/${relativeBuildDir}/${dst}`;
}
function addServerMiddleware(middleware) {
  const nuxt = useNuxt();
  nuxt.options.serverMiddleware.push(middleware);
}
function extendBuild(fn) {
  const nuxt = useNuxt();
  nuxt.options.build.extend = chainFn(nuxt.options.build.extend, fn);
}
function extendRoutes(fn) {
  const nuxt = useNuxt();
  nuxt.options.router.extendRoutes = chainFn(nuxt.options.router.extendRoutes, fn);
}

function resolvePath(path, opts = {}) {
  if (existsSync(path)) {
    return path;
  }
  let resolvedPath;
  if (opts.alias) {
    resolvedPath = resolveAlias(path, opts.alias);
  }
  resolvedPath = resolve$1(opts.base || ".", resolvedPath);
  let isDirectory = false;
  if (existsSync(resolvedPath)) {
    isDirectory = lstatSync(resolvedPath).isDirectory();
    if (!isDirectory) {
      return resolvedPath;
    }
  }
  for (const ext of opts.extensions) {
    const resolvedPathwithExt = resolvedPath + ext;
    if (!isDirectory && existsSync(resolvedPathwithExt)) {
      return resolvedPathwithExt;
    }
    const resolvedPathwithIndex = join$1(resolvedPath, "index" + ext);
    if (isDirectory && existsSync(resolvedPathwithIndex)) {
      return resolvedPathwithIndex;
    }
  }
  if (isDirectory) {
    return resolvedPath;
  }
  throw new Error(`Cannot resolve "${path}" from "${resolvedPath}"`);
}
function resolveAlias(path, alias) {
  for (const key in alias) {
    if (key === "@") {
      continue;
    }
    if (path.startsWith(key)) {
      path = alias[key] + path.substr(key.length);
    }
  }
  return path;
}
function tryResolvePath(path, opts = {}) {
  try {
    return resolvePath(path, opts);
  } catch (e) {
  }
}
async function resolveFiles(path, pattern) {
  const files = await globby(pattern, {
    cwd: path,
    followSymbolicLinks: true
  });
  return files.map((p) => resolve$1(path, p));
}

function defineNuxtModule(input) {
  let mod;
  function wrappedModule(inlineOptions) {
    const nuxt = this.nuxt || useNuxt();
    if (typeof input === "function") {
      const fn = input;
      mod = nuxtCtx.call(nuxt, () => fn(nuxt));
    } else {
      mod = input;
    }
    if (mod.hooks) {
      nuxt.hooks.addHooks(mod.hooks);
    }
    if (typeof mod.setup !== "function") {
      return;
    }
    const configKey = mod.configKey || mod.name;
    const userOptions = defu(inlineOptions, nuxt.options[configKey]);
    const resolvedOptions = applyDefaults(mod.defaults, userOptions);
    return nuxtCtx.call(nuxt, () => mod.setup.call(null, resolvedOptions, nuxt));
  }
  wrappedModule.meta = mod;
  return wrappedModule;
}

async function installModule(nuxt, installOpts) {
  let src;
  let options = {};
  const meta = {};
  if (typeof installOpts === "string") {
    src = installOpts;
  } else if (Array.isArray(installOpts)) {
    [src, options] = installOpts;
  } else if (typeof installOpts === "object") {
    if (installOpts.src || installOpts.handler) {
      src = installOpts.src || installOpts.handler;
      options = installOpts.options;
      Object.assign(meta, installOpts.meta);
    } else {
      src = installOpts;
    }
  } else {
    src = installOpts;
  }
  let handler;
  if (typeof src === "string") {
    const _src = resolveModule(resolveAlias(src, nuxt.options.alias), { paths: nuxt.options.modulesDir });
    handler = requireModule(_src);
    if (!meta.name) {
      meta.name = src;
    }
  } else if (typeof src === "function") {
    handler = src;
  } else {
    handler = defineNuxtModule(src);
  }
  if (handler.meta) {
    Object.assign(meta, handler.meta);
  }
  if (typeof meta.name === "string") {
    nuxt.options._requiredModules = nuxt.options._requiredModules || {};
    if (nuxt.options._requiredModules[meta.name]) {
      return;
    }
    nuxt.options._requiredModules[meta.name] = true;
  }
  const container = new ModuleContainer(nuxt);
  await nuxtCtx.call(nuxt, () => handler.call(container, options));
}

class ModuleContainer {
  constructor(nuxt) {
    this.nuxt = nuxt;
    this.options = nuxt.options;
  }
  _call(fn, ...args) {
    return nuxtCtx.call(this.nuxt, () => fn(...args));
  }
  ready() {
    return Promise.resolve();
  }
  addVendor() {
    console.warn("addVendor has been deprecated and has no effect.");
  }
  addTemplate(tmpl) {
    return this._call(addTemplate, tmpl);
  }
  addPlugin(tmpl) {
    return this._call(addPlugin, tmpl);
  }
  addLayout(tmpl, name) {
    return this._call(addLayout, tmpl, name);
  }
  addErrorLayout(dst) {
    return this._call(addErrorLayout, dst);
  }
  addServerMiddleware(middleware) {
    return this._call(addServerMiddleware, middleware);
  }
  extendBuild(fn) {
    return this._call(extendBuild, fn);
  }
  extendRoutes(fn) {
    return this._call(extendRoutes, fn);
  }
  requireModule(moduleOpts) {
    return installModule(this.nuxt, moduleOpts);
  }
  addModule(moduleOpts) {
    return installModule(this.nuxt, moduleOpts);
  }
}

export { ModuleContainer, addErrorLayout, addLayout, addPlugin, addServerMiddleware, addTemplate, buildNuxt, clearRequireCache, defineNuxtConfig, defineNuxtModule, extendBuild, extendRoutes, getRequireCacheItem, installModule, isNodeModules, loadDotenv, loadEnv, loadNuxt, loadNuxtConfig, nuxtCtx, requireModule, requireModulePkg, resolveAlias, resolveFiles, resolveModule, scanRequireTree, tryRequireModule, tryResolveModule, tryResolvePath, useNuxt };
